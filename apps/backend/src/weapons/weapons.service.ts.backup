import { Injectable } from '@nestjs/common';
import { PrismaClient } from '@mhwildswiki/database/src/generated/client';
import { Weapon } from './models/weapon.model';

@Injectable()
export class WeaponsService {
  private prisma = new PrismaClient();

  async findAll(): Promise<Weapon[]> {
    const weapons = await this.prisma.weapon.findMany({
      orderBy: { nameEn: 'asc' },
    });
    
    return weapons.map(weapon => this.transformToWeapon(weapon));
  }

  async findOne(id: string): Promise<Weapon | null> {
    const weapon = await this.prisma.weapon.findUnique({
      where: { id: parseInt(id) },
    });
    
    if (!weapon) return null;
    return this.transformToWeapon(weapon);
  }

  async findByType(type: string): Promise<Weapon[]> {
    const weapons = await this.prisma.weapon.findMany({
      where: { weaponType: type.toUpperCase() as any },
      orderBy: { nameEn: 'asc' },
    });
    
    return weapons.map(weapon => this.transformToWeapon(weapon));
  }

  async findByRarity(rarity: number): Promise<Weapon[]> {
    const weapons = await this.prisma.weapon.findMany({
      where: { rarity },
      orderBy: { nameEn: 'asc' },
    });
    
    return weapons.map(weapon => this.transformToWeapon(weapon));
  }

  async findByElement(element: string): Promise<Weapon[]> {
    // For now return all weapons since element filtering needs proper implementation
    return this.findAll();
  }

  private transformToWeapon(dbWeapon: any): Weapon {
    const weapon = new Weapon();
    weapon.id = dbWeapon.id.toString();
    weapon.name = dbWeapon.nameEn || 'Unknown';
    weapon.description = dbWeapon.descriptionEn;
    weapon.type = dbWeapon.weaponType || 'Unknown';
    weapon.attack = dbWeapon.rawAttack || 0;
    weapon.rarity = dbWeapon.rarity || 1;
    weapon.element = dbWeapon.elementType;
    
    return weapon;
  }
}
