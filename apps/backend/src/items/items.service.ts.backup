import { Injectable } from '@nestjs/common';
import { PrismaClient } from '@mhwildswiki/database/src/generated/client';
import { Item } from '../common/models/item.model';

@Injectable()
export class ItemsService {
  private prisma = new PrismaClient();

  async findAll(): Promise<Item[]> {
    const items = await this.prisma.item.findMany({
      orderBy: { nameEn: 'asc' },
    });
    
    return items.map(item => this.transformToItem(item));
  }

  async findOne(id: string): Promise<Item | null> {
    const item = await this.prisma.item.findUnique({
      where: { id: parseInt(id) },
    });
    
    if (!item) return null;
    return this.transformToItem(item);
  }

  async findByCategory(category: string): Promise<Item[]> {
    const items = await this.prisma.item.findMany({
      where: { category: category as any },
      orderBy: { nameEn: 'asc' },
    });
    
    return items.map(item => this.transformToItem(item));
  }

  async findByRarity(rarity: number): Promise<Item[]> {
    const items = await this.prisma.item.findMany({
      where: { rarity },
      orderBy: { nameEn: 'asc' },
    });
    
    return items.map(item => this.transformToItem(item));
  }

  async searchByName(name: string): Promise<Item[]> {
    const items = await this.prisma.item.findMany({
      orderBy: { nameEn: 'asc' },
    });
    
    // Filter by name after fetching since SQLite doesn't have great JSON search
    return items
      .map(item => this.transformToItem(item))
      .filter(item => 
        item.name.toLowerCase().includes(name.toLowerCase())
      );
  }

  private transformToItem(dbItem: any): Item {
    const item = new Item();
    item.id = dbItem.id.toString();
    item.name = dbItem.nameEn || dbItem.nameJa || 'Unknown';
    item.category = dbItem.category || 'Unknown';
    item.description = dbItem.descriptionEn || dbItem.descriptionJa || 'No description available';
    item.rarity = dbItem.rarity || 1;
    item.value = dbItem.value || 0;
    return item;
  }
}
